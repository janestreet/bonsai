#print_line_numbers true

open! Core
open! Bonsai
open Bonsai.Let_syntax

type t =
  | A of int
  | B of int
  | C of t list

let _component t (local_ _graph) =
  match%sub t with
  | A x ->
    let%arr x in
    x
  | B x ->
    let%arr x in
    x
  | C l ->
    let%arr l in
    let _ = l in
    Bonsai.return 1.0
;;

[%%expect
  {xxx|
Line 20, characters 4-66:
Error: This expression has type float Bonsai.t Bonsai.t
       but an expression was expected of type int Bonsai.t
       Type float Bonsai.t is not compatible with type int
|xxx}]

let _more_basic_component t (local_ _graph) =
  match%sub Bonsai.return false with
  | false ->
    (* An int! *)
    Bonsai.return 1
  | true ->
    (* A float! *)
    Bonsai.return 1.0
;;

(* This one is fine! *)

[%%expect
  {|
Line 41, characters 4-21:
Error: This expression has type float Bonsai.t
       but an expression was expected of type int Bonsai.t
       Type float is not compatible with type int
|}]

let _more_basic_component t (local_ _graph) =
  match%sub Bonsai.return false with
  | false ->
    (* An int! *)
    Bonsai.return 1
  | true ->
    (* A float! *)
    Bonsai.return (Bonsai.return 1)
;;

(* This one is also fine! (error points to a useful location) *)
[%%expect
  {|
Line 61, characters 4-35:
Error: This expression has type int Bonsai.t Bonsai.t
       but an expression was expected of type int Bonsai.t
       Type int Bonsai.t is not compatible with type int
|}]

(* . errors *)
let component (local_ _graph) =
  let a : (unit, Nothing.t) Result.t Bonsai.t = Bonsai.return (Ok ()) in
  match%sub a with
  | Ok () -> Bonsai.return ()
  | Error _ -> .
;;

[%%expect {| |}]

let component (local_ _graph) =
  let a : (unit, unit) Result.t Bonsai.t = Bonsai.return (Ok ()) in
  match%sub a with
  | Ok () -> Bonsai.return ()
  | Error _ -> .
;;

[%%expect
  {|
Line 87, characters 4-11:
Error: This match case could not be refuted.
       Here is an example of a value that would reach it: Error ()
|}]

(* not ideal to have this error, but can easily write match%arr instead *)
let component (never : unit -> Nothing.t Bonsai.t) (local_ _graph) =
  match%sub never () with
  | _ -> .
;;

[%%expect
  {|
Line 100, characters 9-10:
Error: Unreachable expression was reached
|}]
